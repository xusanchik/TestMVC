@model List<TestMVC.Models.Test>


<style>
    input[type=radio] {
        display: none;
    }

    label {
        display: block;
        width: 95%;
        padding: 10px;
        border: 1px solid #ddd;
        margin-bottom: 10px;
        cursor: pointer;
    }

/*     input[type=radio] + label {
        display: block;
        width: 95%;
        padding: 10px;
        border: 1px solid #ddd;
        margin-bottom: 10px;
        cursor: pointer;
    } */

    input[type=radio] + label:hover {
        border: 1px solid #000000;
    }
        /* input[type=radio]:checked ~ label {
        background-image: none;
        background-color: #0C0;
        color: #fff;
        border: 1px solid #0C0 !important;
        -webkit-transition: all 0.2s ease-in-out;
        -moz-transition: all 0.2s ease-in-out;
        -o-transition: all 0.2s ease-in-out;
        -ms-transition: all 0.2s ease-in-out;
        transition: all 0.2s ease-in-out;
    } */

    .worngans, .success {
        background-color: #F36;
        color: #fff;
        border: 1px solid #F36 !important;
        -webkit-transition: all 0.2s ease-in-out;
        -moz-transition: all 0.2s ease-in-out;
        -o-transition: all 0.2s ease-in-out;
        -ms-transition: all 0.2s ease-in-out;
        transition: all 0.2s ease-in-out;
    }

     .worngans {
        background-color: #F36;
        border: 1px solid #F36 !important;
     }

    .success {
        background-color: green;
        border: 1px solid green !important;
    }
</style>
<html>
    <body>
    
    <div class= "scp-quizzes-main" >
        <form id="myForm" action="@Url.Action("Test", "Check")" method="post">
        @foreach (var test in Model)
        {
            <div class="scp-quizzes-data question">
                <h3> @test.Id. @test.Question </h3>
                <br />
                <ol>
                        @foreach(var option in test.Options)
                        {
                            <li>
                                <input class="squaretest" type="radio" id="@test.Id@option" name="@test.Id" value="@option" answer="@test.RightOption"/>
                                <label data-id="@test.Id" data-optionId="@option" for="@test.Id@option"> @option </label> <br />
                                <input type="hidden" id="OptionRight_@test.Id" name="OptionRights[@test.Id]" value="@option" />
                            </li>
                        }
                </ol>
            </div>
        }
            <button class="click-btn" id="checkClick" type="button"> Check</button>
        <button class="btn-confirm hide" asp-controller="Task" asp-action="Index" type="submit"> BACK </button>

        </form>
   
    </body>
</html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js" type='text/javascript'></script>
 

<script type="text/javascript">
    $(document).ready(function () {
        $('label').click(function () {
            var testId = $(this).data('id');
            var optionId = $(this).data('optionid');
            $('label[data-id="' + testId + '"]').removeClass('worngans');
            $(this).addClass('worngans');
            $('#OptionRight_' + testId).val(optionId);
        });



        $('#checkClick').one('click', function () {
            $(this).prop('disabled', true);
        });

        $('#checkClick').click(function () {
            const myArray = [];
            $('.squaretest:checked').each(function () {
                const testId = $(this).attr('name');
                const answer = $(this).attr('answer');
                const optionId = $(this).val();
                if (optionId == answer) {
                    this.nextElementSibling.classList.remove('worngans')
                    this.nextElementSibling.classList.add('success')
                }

                myArray.push({ testId, optionId });
            });
            $.ajax({
                type: "POST", // Метод HTTP-запроса
                url: "/Test/Check", // URL вашего контроллера и действия
                data: { myArray: myArray }, // Данные, которые вы отправляете
                success: function (response) {
                    console.log(response);
                },
                error: function (error) {
                    console.error(error);
                }
            });

        });
    });
    

    let clickEnabled = true;
    const containers = document.querySelectorAll('.question');
    containers.forEach(function (container) {
        const squaretest = container.querySelectorAll('.squaretest');
        squaretest.forEach(function (choice) {
            choice.addEventListener('click', function (evt) {
                if (clickEnabled) {
                    squaretest.forEach(function (c) {
                        c.classList.remove('bg-danger');
                    });
                    evt.target.classList.add('bg-danger');
                }
            });
        });
    });

    console.log(document.querySelector('.click-btn'))
    document.querySelector('.click-btn').addEventListener("click", (evt) => {
           console.log(evt.target)
    })

</script>
